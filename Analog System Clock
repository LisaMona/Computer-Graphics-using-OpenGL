#define _CRT_SECURE_NO_WARNINGS
#include <cmath>
#include <GL/glut.h>
#include < GL/freeglut.h>
#include <ctime>
#include <sys/timeb.h>
#include <stdlib.h>
#include <stdio.h>
using namespace std;
#define M_PI 3.1415926535897932384626433832795


//float r1 = 30.1f;
const float clockR = 30.0f,				//radius of the clock
clockVol = 50.0f,						//inverse of volume of clock

angle1min = (float)M_PI / 30.0f,		//angle1min=0.1		

minStart = 0.9f,						//starting of white lines(minute hand=5 divisions between hours)
minEnd = 1.0f,							//ending of white lines(minute hand=5 divisions between hours)

hourStart = 0.8f,						//starting of red lines(hours hand)
hourEnd = 1.0f;

const float clockR1 = clockR - (10 * hourStart);

float angleHour = 0,					//variables declared for hour,min and sec respectively
angleMin = 0,
angleSec = 0;

static GLfloat spin = 0.0;



void newLine(float rStart, float rEnd, float angle)
{
	float c = cos(angle), s = sin(angle);
	//glVertex2f(x-axis,y-axis)=(80*starting point*cos80,80*starting point*sin80,)where radius=80.
	glVertex2f(clockR*rStart*c, clockR*rStart*s);
	//glVertex2f(x-axis,y-axis)=(80*starting point*cos80,80*starting point*sin80,)where radius=80.
	glVertex2f(clockR*rEnd*c, clockR*rEnd*s);
}
void midPointCircleAlgo()
{
	const float DEG2RAD = 0.0174532778F;
	glLineWidth(10.0f);
	glBegin(GL_LINE_LOOP);
	glColor3f(0.9, 0.9, 0.2);
	//glBegin(GL_TRIANGLE_FAN);
	float clockR3 = clockR * 1.025;
	for (int i = 0; i < 360; i++)
	{
		glEnable(GL_POINT_SMOOTH);
		glPointSize(200.0);
		//glBegin(GL_POINTS);
		float degInRad = i * DEG2RAD;
		glVertex2f(cos(degInRad)*clockR3, sin(degInRad)*clockR3);
	}

	glEnd();
}
void output(int x, int y, const char *string)
{
	int len, i;
	glRasterPos2f(x, y);
	len = (int)strlen(string);
	for (i = 0; i < len; i++)
	{
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, string[i]);
	}
}
void TimerFunction(int value)
{
	struct timeb tb;
	time_t tim = time(0);
	struct tm* t;
	t = localtime(&tim);
	ftime(&tb);

	angleSec = (float)(t->tm_sec + (float)tb.millitm / 1000.0f) / 30.0f * (float)M_PI;
	angleMin = (float)(t->tm_min) / 30.0f * (float)M_PI + angleSec / 60.0f;
	angleHour = (float)(t->tm_hour > 12 ? t->tm_hour - 12 : t->tm_hour) / 6.0f * (float)M_PI +
		angleMin / 12.0f;

	glutPostRedisplay();
	glutTimerFunc(1000, TimerFunction, 0);
	//glutPostRedisplay();

}

void RenderScene(void)
{
	int i;

	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(0.9f, 0.9f, 0.0f);
	glLineWidth(1.0f);
	glEnable(GL_LINE_SMOOTH);
	glEnable(GL_POINT_SMOOTH);
	glEnable(GL_POLYGON_SMOOTH);
	const float RAD60 = 1.047197551F,
		RAD30 = 0.5235987756;
	//display numbers from 1-12 at position(x,y)
	output(clockR1*0.5, clockR1*sin(RAD60), "1");
	output(clockR1*cos(RAD30), clockR1*0.5, "2");
	output(clockR1, 00, "3");
	output(clockR1*cos(RAD30), -clockR1 * 0.5, "4");
	output(clockR1*0.5, -clockR1 * sin(RAD60), "5");
	output(00, -clockR1, "6");
	output(-clockR1 * 0.5, -clockR1 * sin(RAD60), "7");
	output(-clockR1 * cos(RAD30), -clockR1 * 0.5, "8");
	output(-clockR1, 00, "9");
	output(-clockR1 * cos(RAD30), clockR1*0.5, "10");
	output(-clockR1 * 0.5, clockR1*sin(RAD60), "11");
	output(-1.2, clockR1 / 1.03, "12");

	midPointCircleAlgo();
	glLineWidth(2.5f);
	//glEnable(GL_LINE_SMOOTH);
	glBegin(GL_LINES);
	//int j = 0;
	//int num = 10;
	//char buffer[10] = { '\0' };
	for (i = 0; i<60; i++)
	{
		if (i % 5)
		{ // normal minute
			if (i % 5 == 1)
				glColor3f(1.0f, 1.0f, 1.0f);
			newLine(minStart, minEnd, i*angle1min);
		}
		else
		{
			glColor3f(1.0f, 1.0f, 1.0f);
			newLine(hourStart, hourEnd, i*angle1min);
		}
	}

	glEnd();
	glColor3f(0.4f, 0.7f, 0.4f);
	glEnable(GL_LINE_SMOOTH);
	glLineWidth(3.9f);
	glBegin(GL_LINES);
	newLine(0.0f, 0.5f, -angleHour + (float)M_PI / 2);
	glEnd();
	glColor3f(0.5f, 0.0f, 1.0f);
	glEnable(GL_LINE_SMOOTH);
	glLineWidth(1.8f);
	glBegin(GL_LINES);
	newLine(0.0f, 0.8f, -angleMin + (float)M_PI / 2);

	glLineWidth(0.6f);
	glColor3f(0.4f, 0.7f, 0.0f);
	glBegin(GL_LINES);
	newLine(0.0f, 0.8f, -angleSec + (float)M_PI / 2);
	glEnd();
	struct timeb tb;
	time_t tim = time(0);
	struct tm* t;
	t = localtime(&tim);
	output(-30, -40, asctime(t));
	glutSwapBuffers();
}


void SetupRC(void)
{
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}

///////////////////////////////////////////////////////////
// Called by GLUT library when the window has chanaged size

void ChangeSize(GLsizei w, GLsizei h)
{
	GLfloat aspectRatio;

	// Prevent a divide by zero
	if (h == 0)
		h = 1;

	// Set Viewport to window dimensions
	glViewport(0, 0, w, h);

	// Reset coordinate system
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// Establish clipping volume (left, right, bottom, top, near, far)
	aspectRatio = (GLfloat)w / (GLfloat)h;
	if (w <= h)
		glOrtho(-clockVol, clockVol, -clockVol / aspectRatio, clockVol / aspectRatio, 1.0, -1.0);
	else
		glOrtho(-clockVol * aspectRatio, clockVol * aspectRatio, -clockVol, clockVol, 1.0, -1.0);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}
/* Callback handler for mouse event */

void mouse(int button, int state, int x, int y)
{
	if (button == GLUT_RIGHT_BUTTON) //&& state == GLUT_DOWN)
	{
		//for (int i = 0; i < 360; i++)
		//while (1)
		if (state == GLUT_DOWN)
		{
			glRotatef(-30, 0, 0, 1);
			//Sleep(100);
		}
	}
	else if (button == GLUT_LEFT_BUTTON) //&& state == GLUT_DOWN)
	{
		if (state == GLUT_DOWN)
		{
			glRotatef(30, 0, 0, 1);
			//Sleep(100);
		}
	}
	else
		;
}
///////////////////////////////////////////////////////////
// Main program entry point
int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("clock");
	int timeSinceStart = glutGet(GLUT_ELAPSED_TIME);
	glutMouseFunc(mouse);
	glutDisplayFunc(RenderScene);
	glutReshapeFunc(ChangeSize);
	glutTimerFunc(33, TimerFunction, 1);
	

	SetupRC();

	glutMainLoop();

	return 0;
}
